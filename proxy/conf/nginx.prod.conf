user nginx;
worker_processes auto;
pid /var/run/nginx.pid;
events {
  worker_connections 1024;
}
http {
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 10m;

  upstream plex_backend {
    # change plex-server.example.com:32400 to the hostname:port of your plex server.
    # this can be "localhost:32400", for instance, if Plex is running on the same server as nginx.
    server 192.168.1.106:32400;
    keepalive 32;
  }

  include /etc/nginx/mime.types;
  # default_type  application/octet-stream;
  default_type text/html;
  log_format main
  '$remote_addr - $remote_user [$time_local] "$request" '
  '$status $body_bytes_sent "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for"';
  access_log /var/log/nginx/access.log main;
  error_log /var/log/nginx/error.log warn;
  sendfile on;
  #tcp_nopush     on;
  keepalive_timeout 65;
  #gzip  on;
  client_max_body_size 10G;
  proxy_request_buffering off;


  proxy_cache_path /var/cache/nginx/jellyfin levels=1:2 keys_zone=jellyfin:100m max_size=15g inactive=30d use_temp_path=off;

  server {
    listen 47808;
    server_name  plex.dle.dev www.plex.dle.dev;

    access_log /var/log/nginx/access.http.log;
    error_log /var/log/nginx/error.http.log;

    location '/.well-known/acme-challenge/' {
      default_type "text/plain";
      root /var/www/;
    }
    location / {
      return 301 https://$host$request_uri;
    }
  }

  server {
    listen 47809 ssl;
    server_name stream.dle.dev;

    ## The default `client_max_body_size` is 1M, this might not be enough for some posters, etc.
    client_max_body_size 20M;

    # Comment next line to allow TLSv1.0 and TLSv1.1 if you have very old clients
    ssl_protocols TLSv1.3 TLSv1.2;


    ssl_certificate /etc/letsencrypt/live/dle.dev/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/dle.dev/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/dle.dev/fullchain.pem;
    ssl_stapling on;
    ssl_stapling_verify on;

    # (if you aren't using DNS remove the resolver line and change the variable to point to an IP address e.g `set $jellyfin 127.0.0.1`)
    set $jellyfin 192.168.1.106;
    # use a variable to store the upstream proxy
    # in this example we are using a hostname which is resolved via DNS
    # resolver 127.0.0.1 valid=30;

    # NOTE: X-Frame-Options may cause issues with the webOS app
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "0"; # Do NOT enable. This is obsolete/dangerous
    add_header X-Content-Type-Options "nosniff";


    # Permissions policy. May cause issues on some clients
    add_header Permissions-Policy "accelerometer=(), ambient-light-sensor=(), battery=(), bluetooth=(), camera=(), clipboard-read=(), display-capture=(), document-domain=(), encrypted-media=(), gamepad=(), geolocation=(), gyroscope=(), hid=(), idle-detection=(), interest-cohort=(), keyboard-map=(), local-fonts=(), magnetometer=(), microphone=(), payment=(), publickey-credentials-get=(), serial=(), sync-xhr=(), usb=(), xr-spatial-tracking=()" always;

    # Content Security Policy
    # See: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
    # Enforces https content and restricts JS/CSS to origin
    # External Javascript (such as cast_sender.js for Chromecast) must be whitelisted.
    add_header Content-Security-Policy "default-src https: data: blob: ; img-src 'self' https://* ; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' https://www.gstatic.com https://www.youtube.com blob:; worker-src 'self' blob:; connect-src 'self'; object-src 'none'; frame-ancestors 'self'; font-src 'self'";

    add_header Strict-Transport-Security "max-age=31536000" always;

    # Security / XSS Mitigation Headers

    # COOP/COEP. Disable if you use external plugins/images/assets
    # add_header Cross-Origin-Opener-Policy "same-origin" always;
    # add_header Cross-Origin-Embedder-Policy "require-corp" always;
    # add_header Cross-Origin-Resource-Policy "same-origin" always;


    # Tell browsers to use per-origin process isolation
    # add_header Origin-Agent-Cluster "?1" always;


    # Content Security Policy
    # See: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
    # Enforces https content and restricts JS/CSS to origin
    # External Javascript (such as cast_sender.js for Chromecast) must be whitelisted.
    # NOTE: The default CSP headers may cause issues with the webOS app
    #add_header Content-Security-Policy "default-src https: data: blob: http://image.tmdb.org; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' https://www.gstatic.com https://www.youtube.com blob:; worker-src 'self' blob:; connect-src 'self'; object-src 'none'; frame-ancestors 'self'";
    location = / {
      return 302 http://$host/web/;
      #return 302 https://$host/web/;
    }

    # Cache images (inside server block)
    location ~ /Items/(.*)/Images {
      proxy_pass http://$jellyfin:8096;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Protocol $scheme;
      proxy_set_header X-Forwarded-Host $http_host;

      proxy_cache jellyfin;
      proxy_cache_revalidate on;
      proxy_cache_lock on;
      add_header X-Cache-Status $upstream_cache_status; # This is only to check if cache is working
    }

    location / {
      # Proxy main Jellyfin traffic
      proxy_pass http://$jellyfin:8096;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Protocol $scheme;
      proxy_set_header X-Forwarded-Host $http_host;

      # Disable buffering when the nginx proxy gets very resource heavy upon streaming
      proxy_buffering off;
    }

    #    # location block for /web - This is purely for aesthetics so /web/#!/ works instead of having to go to /web/index.html/#!/
    #    location = /web/ {
    #      # Proxy main Jellyfin traffic
    #      proxy_pass http://$jellyfin:8096/web/index.html;
    #      proxy_set_header Host $host;
    #      proxy_set_header X-Real-IP $remote_addr;
    #      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #      proxy_set_header X-Forwarded-Proto $scheme;
    #      proxy_set_header X-Forwarded-Protocol $scheme;
    #      proxy_set_header X-Forwarded-Host $http_host;
    #    }

    location /socket {
      # Proxy Jellyfin Websockets traffic
      proxy_pass http://$jellyfin:8096;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Protocol $scheme;
      proxy_set_header X-Forwarded-Host $http_host;
    }
  }

  server {
    listen 47809 ssl;
    server_name plex.dle.dev www.plex.dle.dev;
    send_timeout 100m; #Some players don't reopen a socket and playback stops totally instead of resuming after an extended pause (e.g. Chrome)
    #Faster resolving, improves stapling time. Timeout and nameservers may need to be adjusted for your location Google's have been used here.
    resolver 8.8.4.4 8.8.8.8 valid=300s;
    resolver_timeout 10s;
    #Use letsencrypt.org to get a free and trusted ssl certificate
    ssl_certificate /etc/letsencrypt/live/dle.dev/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/dle.dev/privkey.pem;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    #Intentionally not hardened for security for player support and encryption video streams has a lot of overhead with something like AES-256-GCM-SHA384.
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    #Why this is important: https://blog.cloudflare.com/ocsp-stapling-how-cloudflare-just-made-ssl-30/
    ssl_stapling on;
    ssl_stapling_verify on;
    #For letsencrypt.org you can get your chain like this: https://esham.io/2016/01/ocsp-stapling
    ssl_trusted_certificate /etc/letsencrypt/live/dle.dev/fullchain.pem;
    #Reuse ssl sessions, avoids unnecessary handshakes
    #Turning this on will increase performance, but at the cost of security. Read below before making a choice.
    #https://github.com/mozilla/server-side-tls/issues/135
    #https://wiki.mozilla.org/Security/Server_Side_TLS#TLS_tickets_.28RFC_5077.29
    #ssl_session_tickets on;
    ssl_session_tickets off;
    #Use: openssl dhparam -out dhparam.pem 2048 - 4096 is better but for overhead reasons 2048 is enough for Plex.
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    ssl_ecdh_curve secp384r1;
    #Will ensure https is always used by supported browsers which prevents any server-side http > https redirects, as the browser will internally correct any request to https.
    #Recommended to submit to your domain to https://hstspreload.org as well.
    #!WARNING! Only enable this if you intend to only serve Plex over https, until this rule expires in your browser it WONT BE POSSIBLE to access Plex via http, remove 'includeSubDomains;' if you only want it to effect your Plex (sub-)domain.
    #This is disabled by default as it could cause issues with some playback devices it's advisable to test it with a small max-age and only enable if you don't encounter issues. (Haven't encountered any yet)
    #add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    #Plex has A LOT of javascript, xml and html. This helps a lot, but if it causes playback issues with devices turn it off. (Haven't encountered any yet)
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_types text/plain
            text/css
            text/xml
            application/xml
            text/javascript
            application/x-javascript
            image/svg+xml;
    gzip_disable "MSIE [1-6]\.";
    #Nginx default client_max_body_size is 1MB, which breaks Camera Upload feature from the phones.
    #Increasing the limit fixes the issue. Anyhow, if 4K videos are expected to be uploaded, the size might need to be increased even more
    client_max_body_size 100M;
    #Forward real ip and host to Plex
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    #When using ngx_http_realip_module change $proxy_add_x_forwarded_for to '$http_x_forwarded_for,$realip_remote_addr'
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Sec-WebSocket-Extensions $http_sec_websocket_extensions;
    proxy_set_header Sec-WebSocket-Key $http_sec_websocket_key;
    proxy_set_header Sec-WebSocket-Version $http_sec_websocket_version;
    #Websockets
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    #Disables compression between Plex and Nginx, required if using sub_filter below.
    #May also improve loading time by a very marginal amount, as nginx will compress anyway.
    proxy_set_header Accept-Encoding "";
    #Buffering off send to the client as soon as the data is received from Plex.
    proxy_redirect off;
    proxy_buffering off;

    add_header X-Frame-Options           "SAMEORIGIN" always;
    add_header X-XSS-Protection          "1; mode=block" always;
    add_header X-Content-Type-Options    "nosniff" always;
    add_header Referrer-Policy           "no-referrer-when-downgrade" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;


    location / {
      #Example of using sub_filter to alter what Plex displays, this disables Plex News.
      sub_filter ',news,' ',';
      #sub_filter_once on;
      #sub_filter_types text/xml;
      proxy_pass http://plex_backend;
    }
  }

  #     server {
  #             listen 47809 ssl;
  #             server_name cloud.dle.dev www.cloud.dle.dev;
  #
    #             ssl_certificate /etc/letsencrypt/live/dle.dev/fullchain.pem;
  #             ssl_certificate_key /etc/letsencrypt/live/dle.dev/privkey.pem;
  #             include /etc/letsencrypt/options-ssl-nginx.conf;
  #             ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
  #             client_max_body_size 10G;
  #             proxy_request_buffering off;
  #
    #             add_header X-Frame-Options           "SAMEORIGIN" always;
  #             add_header X-XSS-Protection          "1; mode=block" always;
  #             add_header X-Content-Type-Options    "nosniff" always;
  #             add_header Referrer-Policy           "no-referrer-when-downgrade" always;
  #             add_header Content-Security-Policy   "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com/; font-src 'self' https://fonts.gstatic.com; frame-src 'self'; connect-src 'self'; object-src 'none' ";
  #             add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
  #
    #             location = /.well-known/carddav {
  #                 return 301 $scheme://$host/remote.php/dav;
  #             }
  #             location = /.well-known/caldav {
  #                 return 301 $scheme://$host/remote.php/dav;
  #             }
  #             location /.well-known/webfinger {
  #                 return 301 $scheme://$host/webfinger;
  #             }
  #             location / {
  #                 resolver 127.0.0.11 valid=30s;
  #                 add_header Strict-Transport-Security "max-age=15768000";
  #                 proxy_set_header Host $host;
  #                 proxy_set_header X-Real-IP $remote_addr;
  #                 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  #                 proxy_set_header X-Forwarded-Proto https;
  #                 proxy_read_timeout 60;
  #                 proxy_connect_timeout 60;
  #                 proxy_redirect off;
  #                 proxy_pass http://cloud:80;
  #             }
  #         }
}